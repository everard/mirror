// Copyright Nezametdinov E. Ildus 2023.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// https://www.boost.org/LICENSE_1_0.txt)
//
module; // Global module fragment.

#include <stddef.h>
#include <stdint.h>

#include <concepts>
#include <limits>

#include <utility>
#include <tuple>
#include <type_traits>

export module mirror;

////////////////////////////////////////////////////////////////////////////////
//
// 1. Non-static data member counting utilities.
//
////////////////////////////////////////////////////////////////////////////////

namespace mirror::detail {

// Special type which is convertible to any other type, except for possibly
// cv-qualified versions of itself, and corresponding reference types.
template <typename T, size_t I>
struct universal {
    template <typename U>
    operator U() const noexcept
        requires(!std::same_as<T, std::remove_cvref_t<U>>);
};

// A concept for a type which is constructible with a sequence of arguments. The
// size of the sequence is the same as the size of the non-type template
// parameter pack.
template <typename T, size_t... Indices>
concept constructible_from =
    requires { T{std::declval<universal<T, Indices>>()...}; };

// A predicate which shows if the given type is constructible with the given
// number of arguments.
template <typename T, size_t N>
constexpr auto is_constructible =
    []<size_t... Indices>(std::index_sequence<Indices...>) {
        return constructible_from<T, Indices...>;
    }(std::make_index_sequence<N>{});

// A median between two values.
template <size_t L, size_t R>
constexpr auto median = ((L / 2) + (R / 2) + ((1 + (L % 2) + (R % 2)) / 2));

// Performs compile-time binary search.
template <typename T, size_t L, size_t M, size_t R>
constexpr auto
bisect() noexcept -> size_t {
    if constexpr(L == R) {
        return L;
    } else {
        if constexpr(is_constructible<T, M>) {
            return bisect<T, M, median<M, R>, R>();
        } else {
            return bisect<T, L, median<L, M - 1>, M - 1>();
        }
    }
}

// Counts the number of non-static data members in the given type.
template <typename T>
constexpr auto
count_data_members() noexcept {
    // Obtain the number of bits in byte.
    constexpr auto byte_width =
        static_cast<size_t>(std::numeric_limits<unsigned char>::digits);

    // Compute the size of the type in bits. This will be the upper bound for
    // binary search.
    constexpr auto bit_size = static_cast<size_t>(sizeof(T) * byte_width);

    // Make sure the size computation does not overflow.
    static_assert(bit_size / sizeof(T) == byte_width);

    // Run binary search.
    return bisect<T, 0, median<0, bit_size>, bit_size>();
}

} // namespace mirror::detail

////////////////////////////////////////////////////////////////////////////////
//
// 2. Reflection.
//
////////////////////////////////////////////////////////////////////////////////

export namespace mirror {

////////////////////////////////////////////////////////////////////////////////
// Definition of a concept that models types which can be reflected.
////////////////////////////////////////////////////////////////////////////////

template <typename T>
concept reflexible =
    std::is_aggregate_v<T> && std::is_default_constructible_v<T> &&
    std::move_constructible<T>;

////////////////////////////////////////////////////////////////////////////////
// Reflection interface.
////////////////////////////////////////////////////////////////////////////////

// Count of the non-static data members in the given type.
template <reflexible T>
constexpr auto data_member_count = detail::count_data_members<T>();

// Returns a tuple of references to non-static data members of the given object.
template <reflexible T>
constexpr auto
reflect(T& x) noexcept
    requires(data_member_count<T> <= (@limit@)) {
    if constexpr(data_member_count<T> == 0) {
        return std::tuple<>{};
    } (@generate_specializations@)
}

} // namespace mirror
